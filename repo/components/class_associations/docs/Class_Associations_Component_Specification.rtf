{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}}
\viewkind4\uc1\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\ul\b\f0\fs28 Class Associations v1.0 Component Specification\par
\pard\li720\sa120\ulnone\b0\fs20\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\tx360\b\fs24 1.\tab Design\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\b0\fs20 The Class Associations Component provides the user with a mechanism for associating a specific "Handler" Object with a specific "target" class.  With this mechanism in place, the user can then retrieve the appropriate "Handlers" for instances of the "target" Class.  The appropriate "Handler" is defined by the Association Algorithm that is used.\par
The default Association Algorithm simply returns the handler associated with the "target" class.  If none are found, then the handler associated with the "closest" superclass of the target will be returned (see Required Algorithms for more details).\par
\b\i Limitations of the Component\i0\par
\b0 The functionality of the component has some limitations, completely arising from the nature of the problem: This component attempts to solve the problem of determining which Object is the appropriate one to be used in a given situation.  This implies that the User is unable to determine the Object at compile time (otherwise, the User would simply specify the object in the source code rather than use this component).\par
This means that the user will not know which methods to invoke upon the returned "Handler" object!  The user will not be sure whether an instance of Class A (which has methodA) or an instance of Class B (which has methodB) would be returned, since this cannot be determined until run-time!\par
To address this problem, the Component must be utilized in three ways:\par
    1.  All handlers registered with a specific ClassAssociator must conform to a common interface.  In section 1.3 of the Requirements Specification, the registered handlers are "RectangleDrawer" and "SquareDrawer" - this suggests that both handlers conform to the "Drawer" interface.  Any returned Handlers can then be cast to the common interface and the client can work with the handlers via the API provided by that interface.\par
    2.  All handlers registered with a specific ClassAssociator must conform to a common class.  Each handler instance can then be configured with different attribute parameters, so that their behavior would be different according to the "target" class.  Similar to #1, the returned Handlers can be cast to the common class.\par
    3.  Use reflection to determine what methods can be invoked on the returned "Handler" object, then invoke the appropriate methods.\par
Of the three methods outlined above, methods #1, and #2 are the most likely to be used.  Again, the nature of the problem limits it that the methods above are imposed "contractually", or with "usage warnings" - otherwise, the flexibility of the component is severely compromised (it would mean that the clients would have to design their objects with this component in mind - and this is unacceptable).  \par
However, to help facilitate the correct use of the component via methods #1 and #2, the component provides methods that can limit the type of "Handlers" accepted to a specific class or interface.  In this way, accidental misuse of the component (by adding the wrong Handler type) is avoided.\par
\b\i Handlers for "Target" Interfaces\b0\i0\par
The other major issue to consider here is that of "target" interfaces.  The example in the Requirements Specification document only has "Handlers" that are registered with "Target" classes instead of with a "Target" interface.\par
Interfaces have the potential to cause collision problems: An object can belong to a class and implement one or more interfaces at the same time.  Resolving a collision - ie, determining which is the "correct" handler to return - may be a problem.\par
In this case, the "correct" handler to return would be the one registered with the class, since a class is more specific than an interface.  Only when no "Class Handlers" can be found will an "Interface Handler" be returned.  The default would return the first "Interface Handler" that can be found that has no subclass "Interface Handlers" of the "Target".\par
This is albeit naive solution, but the existence of pluggable algorithms means that better methods for resolving Interface collision can be added, if and when the need arises.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\cf0\b 1.1\tab Design Patterns\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\b0 Future component direction indicate that additional association algorithms may be useful.  As such, the \b Strategy \b0 pattern is applied in order to offer support of any future algorithm implementations.\cf2\i\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\cf0\b\i0 1.2\tab Industry Standards \par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\cf1\b0 None.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\b 1.3\tab Required Algorithms\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\b0\i DefaultAlgorithm\par
\i0 This is the algorithm that was specified in the Requirement's Specification:\par
\f1\tab\'b7  \f0 Find handler objects whose associated class is the type of the target, and return it if present.\par
\tab\f1\'b7  \f0 If there is no association with the actual type of the target, search for associations (that can handle subtypes) that are associated with supertypes of the target.\par
\tab\f1\'b7  \f0 Of these associations, search for one that is associated with a class that is a subtype of all others.\par
The above algorithm is pretty simple, and it can be implemented using 1-2 loops (depending on implementation), and Class.isAssignableFrom(Class c) method.  The implementation should be very similar to an algorithm for finding the minimum number within a list of numbers.\par
However, the default algorithm in our case has the following additional conditions (these conditions apply to the handlers that are associated with supertypes of the target):\par
\f1\tab\'b7  \f0 If the handler is associated with a class that is an interface, this handler must NOT be returned unless there are no handlers associated with "true" or "non-interface" classes.  Otherwise, return the handler associated with the Class.\par
\f1\tab\'b7  \f0 If two or more interface handlers are found, then return an interface handler such that there are no other interface handlers which are registered as subtypes of the returned interface handler.  Any candidate is suitable.\par
The Class.isInterface() method can be very helpful in implementing the added conditions.  The additional logic can be done by adding another extra pass over the list of classes. It is even possible to store the Interface associations during the initial pass to save even more time.\i\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\b\i0 1.4\tab Component Class Overview\par
\pard\b0\tab\b ClassAssociator\b0 :\par
\tab\tab This is the main class of the Class Associations component. The ClassAssociator \tab encapsulates the mapping of "Handler" objects to specific "Target" classes. The \tab ClassAssociator can then retrieve the appropriate "Handler" for a specified "Target" class or \tab object. The "Handlers" are retrieved using the default Association Algorithm, which simply \tab returns the handler which is "closest" to the class of the "Target" that was specified. The \tab ClassAssociator also offers support for additional pluggable association algorithms.\par
\tab\par
\b\tab AssociationAlgorithm \b0\i (Interface)\i0 :\par
\pard\fi720\li720 An object that can retrieve "Handlers" for specific targets. Each implementation offers different logic of determining which is the appropriate "Handler" to return.\par
\pard\par
\tab\b DefaultAssociationAlgorithm\b0 :\par
\pard\fi720\li720 Default implementation of the AssociationAlgorithm. This implementation would return the handler that is directly associated with the class of the "target".  If no such handler is available, the handler of the "closest" class to the target is returned.  (See Required Algorithms Section for more details) \par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\b 1.5\tab Component Exception Definitions\par
\pard\b0\tab\b IllegalArgumentException\b0 :\par
\pard\fi720\sa120\tab Thrown by nearly all the methods in this component when a null value is passed as \tab a parameter.  It is also thrown if the client attempts to remove an algorithm using \tab DEFAULT_ALGORITHM as the specified algorithm name, since this would cause the \tab ClassAssociator to break.\par
\pard\sa120\tab\b IllegalHandlerException:\b0\par
\tab\tab The custom IllegalHandlerException is thrown when a "Handler" object is \tab registered, that is not an instance of the specified RestrictionHandler class, and the client \tab specifies that Handler Restriction must be enforced.\par
\tab\b IllegalStateException:\par
\tab\tab\b0 Thrown by the setHandlerRestriction and setHandlerRestrictionClass methods \tab when they specify to disallow a class of "Handlers" which are already present within the \tab ClassAssociator.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b 1.6\tab Component Benchmark and Stress Tests\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\b0 The component has a set of mapping routines as well as an Association Algorithm that at the worst runs at linear O(n) complexity.\par
Testing the performance of this component will consist of measuring the period of time it takes to perform the DefaultAlgorithm.  To test the component, a ClassAssociator must be set up with 20, 40, and 60 Associations arranged in a linear hiearchy.  The number of executions within 3 seconds of the retrieveHandler method will then be measured - the execution it takes to perform these operations must scale with linear inversion to the number of Associations within the ClassAssociator.  (ie 20 Associations must perform ~3x more executions than 60 Associations).\par
It should also be noted that the first execution of this method will probably be slower than usual, because the JVM has to load the class.  As such, it may also be advisable to have a "start-up" test before performing the actual tests.\par
The ClassAssociator is not thread-safe.  However, several instances of the ClassAssociator can be initialized (one for each thread), and no significant performance overheads, except for the JVM thread management, should be expected. \par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\tx360\b\fs24 2.\tab Environment Requirements\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\fs20 2.1\tab Environment\par
\pard\li720\b0\f1\'b7     \f0 Development Language: Java 1.4\par
\f1\'b7     \f0 Compile Targets: Java 1.3 and Java 1.4 \par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b 2.2\tab TopCoder Software Components\par
\pard\li720\b0 No additional software components are required.\par
\pard\li720\sa120\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b 2.3\tab Third Party Components\par
\pard\nowidctlpar\s3\li720\sb120\sa60\sl240\slmult0\b0 No Third Party Components are required.\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\tx360\b\fs24 3.\tab Installation and Configuration\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\fs20 3.1\tab Package Name\par
\pard\nowidctlpar\li720\sa120\sl240\slmult0\b0 com.topcoder.util.classassociations\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\b 3.2\tab Configuration Parameters\par
\pard\b0\tab None.\par
\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\tx0\b 3.3\tab Dependencies Configuration\par
\tab\b0 No dependencies are needed, so no configuration is required.\b\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\tx360\fs24 4.\tab Usage Notes\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\fs20 4.1\tab Required steps to test the component\par
\pard\fi-360\li1080\sa120\tx1080\b0\f1\'b7\tab\f0 Extract the component distribution.\par
\pard\fi-360\li1080\sa120\f1\'b7      \f0 Execute \lquote ant test\rquote  within the directory that the distribution was extracted to.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b 4.2\tab Required steps to use the component\par
\pard\fi-360\li1080\sa120\tx1080\b0 First, configure the component and make sure that it is accessible from the classpath.\par
Decide which family of "Handler" objects the ClassAssociator will return.\par
(Optional) Specify the class of the family of "Handler" objects with the setHandlerRestriction() and setHandlerRestrictionClass() methods, to make misuse more unlikely.\par
\b To Associate a Handler with a Single Class\b0 :\par
\f1\'b7  \f0 Call ClassAssociator.addAssociation() with either the target class or an instance of the target class.\par
\b To Associate a Handler with a Hiearchy of Classes\b0 :\par
\f1\'b7  \f0 Call ClassAssociator.addGroupAssociation() with either the target class or an instance of the target class hiearchy.\par
\b To Retrieve a Handler for a Class\b0 :\par
\f1\'b7  \f0 Call ClassAssociator.retrieveHandler() with either the target class or an instance of the target Class.\par
\f1\'b7 \f0  It would probably be useful to cast the returned Object to the class of the "Handler" family of this ClassAssociator.\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\tab To Add a Custom Algorithm:\par
\tab\b0\f1\'b7  \f0 Create your own class that implements the AssociationAlgorithm interface.\par
\tab\f1\'b7  \f0 Call ClassAssociator.addAlgorithm() with the name of the Algorithm and an instance of \tab your custom class.\b\par
\pard\fi-360\li1080\sa120\tx1080\par
To Retrieve a Handler for a Class using a Custom Algorithm\b0 :\par
\pard\keepn\nowidctlpar\s2\sb120\sa60\sl240\slmult0\tx0\b\tab\b0\f1\'b7  \f0 Call ClassAssociator.retrieveHandler() with the target class, and the name of the \tab Algorithm.\b\par
4.3\tab Demo\par
\tab\b0\f2 // This code demonstrates the use of the Class Associations \tab // Component.\par
\tab import com.topcoder.examples.*;\par
\tab import com.topcoder.util.classassociations.ClassAssociator;\par
\b\f0\tab\b0\f2 ClassAssociator ca = new ClassAssociator();\par
\tab // In this example, the family of "Handlers" will be implementing \tab // the "Validator" interface.  Set HandlerRestriction to make the \tab // ClassAssociator "safer" to use.\tab\par
\b\f0\tab\b0\f2 ca.setHandlerRestrictionClass(Class.forName("com.topcoder.examples.Validator"));\par
\tab ca.setHandlerRestriction(true);\par
\tab // Now, start assigning associations.\par
      try \{\par
\tab ca.addAssociation(Class.forName("com.topcoder.examples.MediumData"), new MediumValidator());\par
\tab ca.addAssociation(new SmallData(), new SmallValidator());\par
\tab ca.addGroupAssociation(new EnormousData(), new EnormousValidator());\par
\tab\} catch (IllegalHandlerException e) \{\par
\tab\tab System.err.println("The handlers that were specified do not \tab implement the "Validator" interface!");\par
\tab\}\par
\tab // At some later stage, we can then retrieve these associations\par
\tab RandomData foo = new RandomData();\par
\tab Validator fooHandler = (Validator) ca.retrieveHandler(foo);\par
\tab // Use fooHandler to your heart's content!\b\f0\par
\b0\f2\tab fooHandler.validate(foo);\par
\pard\keepn\nowidctlpar\s1\sb120\sa60\sl240\slmult0\tx360\b\f0\fs24 5.\tab Future Enhancements\par
\pard\sa120\b0\fs20\tab Implement additional AssociationAlgorithms.  A notable issue is a better method of resolving collisions when a Target Class implements two interfaces, both of which have a registered Handler.\par
}
 