/*
 * Copyright (C) 2005 TopCoder Inc., All Rights Reserved.
 *
 * ZipCreatorFailureTestCases.java
 */
package com.topcoder.util.archiving.stresstests;

import junit.framework.TestCase;

import java.io.File;

import com.topcoder.util.archiving.ZipCreator;

/**
 * Stress tests for ZipCreation.
 *
 * @author STRESS_REVIEWER
 * @version 2.0
 */
public class ZipCreationStressTest extends TestCase {
    /**
     * <p>
     * the name of the temp directory used to stored files generated by the testcases
     * </p>
     */
    private final static String TEST_RESULT = "test_files/test_result";

    /**
     * <p>
     * the temp directory used to stored files generated by the testcases
     * </p>
     */
    private File resultDir = null;

    /**
     * <p>
     * set up the enviroment, here a directory named "test_result" under test_files/ will be created
     * </p>
     *
     * @throws Exception if any Exception has occured
     */
    protected void setUp() throws Exception {
        resultDir = new File(TEST_RESULT);

        //create the directory
        resultDir.mkdirs();
    }

    /**
     * <p>
     * delete File fileToDelete
     * </p>
     *
     * @param fileToDelete the File to be deleted
     */
    protected void clean(File fileToDelete) {
        if (fileToDelete.isFile()) {
            //delete the file directly if it's a normal file
            fileToDelete.delete();
        } else {
            //else if it's a directory, delete all files under it first
            //then delete itself
            File[] files = fileToDelete.listFiles();

            for (int i = 0; i < files.length; i++) {
                //recursively delete all its subfiles
                clean(files[i]);
            }

            //delete itself
            fileToDelete.delete();
        }
    }

    /**
     * <p>
     * clean the enviroment, here the test_result directory under test_files will be removed
     * </p>
     */
    protected void tearDown() {
        //clean(resultDir);
    }


    /**
     * <p>
     * test archiveFiles(File, File) with correct arguments
     * </p>
     *
     * @throws Exception if any Exception has occured
     */
    public void testArchiveFileStressTest001() throws Exception {
        System.out.println("Archiving 5 directories in a chain:");
        ZipCreator zc = new ZipCreator();
        final File sourceDir = new File("test_files/stresstests/archive1");
        long startTime;
        long endTime;

        //archive all files under test_files/archive_test_files to the archive file
        startTime = System.currentTimeMillis();
        zc.archiveFiles(sourceDir, new File(resultDir.getPath() + "/created_by_ZC1.zip"));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took - "
                + (endTime - startTime)
                + " milliseconds.");
    }

    /**
     * <p>
     * test archiveFiles(File, File) with correct arguments
     * </p>
     *
     * @throws Exception if any Exception has occured
     */
    public void testArchiveFileStressTest002() throws Exception {
        System.out.println("Archiving 10 directories in a chain:");
        ZipCreator zc = new ZipCreator();
        final File sourceDir = new File("test_files/stresstests/archive2");
        long startTime;
        long endTime;

        //archive all files under test_files/archive_test_files to the archive file
        startTime = System.currentTimeMillis();
        zc.archiveFiles(sourceDir, new File(resultDir.getPath() + "/created_by_ZC2.zip"));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }

}








