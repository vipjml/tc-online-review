/*
 * Copyright (C) 2005 TopCoder Inc., All Rights Reserved.
 *
 * ZipCreatorFailureTestCases.java
 */
package com.topcoder.util.archiving.stresstests;

import junit.framework.TestCase;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;

import com.topcoder.util.archiving.ZipExtractor;

/**
 * Accuracy tests for ZipExtractor.
 *
 * @author STRESS_REVIEWER
 * @version 2.0
 */
public class ZipExtractionStressTest extends TestCase {
    /**
     * <p>
     * the name of the temp directory used to stored files generated by the testcases
     * </p>
     */
    private final static String TEST_RESULT = "test_files/test_result";

    /**
     * <p>
     * the temp directory used to stored files generated by the testcases
     * </p>
     */
    private File resultDir = null;

    /**
     * <p>
     * set up the enviroment, here a directory named "test_result" under test_files/ will be created
     * </p>
     *
     * @throws Exception if any Exception has occured
     */
    protected void setUp() throws Exception {
        resultDir = new File(TEST_RESULT);

        //create the directory
        resultDir.mkdirs();
    }

    /**
     * <p>
     * delete File fileToDelete
     * </p>
     *
     * @param fileToDelete the File to be deleted
     */
    protected void clean(File fileToDelete) {
        if (fileToDelete.isFile()) {
            //delete the file directly if it's a normal file
            fileToDelete.delete();
        } else {
            //else if it's a directory, delete all files under it first
            //then delete itself
            File[] files = fileToDelete.listFiles();

            for (int i = 0; i < files.length; i++) {
                //recursively delete all its subfiles
                clean(files[i]);
            }

            //delete itself
            fileToDelete.delete();
        }
    }

    /**
     * <p>
     * clean the enviroment, here the test_result directory under test_files will be removed
     * </p>
     */
    protected void tearDown() {
        clean(resultDir);
    }


    public void testExtractFiles_StressTest001() throws Exception {
        System.out.println("Decompressing empty zip file:");
        long startTime;
        long endTime;
        ZipExtractor ze = new ZipExtractor();
        File sourceFile = new File("test_files/stresstests/files_to_extract_Stress001.zip");
        //extract files specified by fileList from the specified archive file
        startTime = System.currentTimeMillis();
        ze.extractFiles(sourceFile, new File(resultDir.getPath()));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }

    public void testExtractFiles_StressTest002() throws Exception {
        System.out.println("Decompressing 1 dir zip :");
        long startTime;
        long endTime;
        ZipExtractor ze = new ZipExtractor();
        File sourceFile = new File("test_files/stresstests/files_to_extract_Stress002.zip");
        //extract files specified by fileList from the specified archive file
        startTime = System.currentTimeMillis();
        ze.extractFiles(sourceFile, new File(resultDir.getPath()));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }

     public void testExtractFiles_StressTest003() throws Exception {
        System.out.println("Decompressing 3 dir zip :");
        long startTime;
        long endTime;
        ZipExtractor ze = new ZipExtractor();
        File sourceFile = new File("test_files/stresstests/files_to_extract_Stress003.zip");
        //extract files specified by fileList from the specified archive file
         startTime = System.currentTimeMillis();
        ze.extractFiles(sourceFile, new File(resultDir.getPath()));
         endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }

    public void testExtractFiles_StressTest004() throws Exception {
        System.out.println("Decompressing 5 dir zip :");
        long startTime;
        long endTime;
        ZipExtractor ze = new ZipExtractor();
        File sourceFile = new File("test_files/stresstests/files_to_extract_Stress004.zip");
        //extract files specified by fileList from the specified archive file
        startTime = System.currentTimeMillis();
        ze.extractFiles(sourceFile, new File(resultDir.getPath()));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }
    public void testExtractFiles_StressTest005() throws Exception {
        System.out.println("Decompressing 10 dir zip :");
        long startTime;
        long endTime;
        ZipExtractor ze = new ZipExtractor();
        File sourceFile = new File("test_files/stresstests/files_to_extract_Stress005.zip");
        //extract files specified by fileList from the specified archive file
        startTime = System.currentTimeMillis();
        ze.extractFiles(sourceFile, new File(resultDir.getPath()));
        endTime = System.currentTimeMillis();
        System.out.println(
            "\tCompression took -  "
                + (endTime - startTime)
                + " milliseconds.");
    }
}








