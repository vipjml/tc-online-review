/**
 * Copyright (c) 2004, TopCoder Inc. All rights reserved.
 */
package com.topcoder.util.generator.guid.failuretests;

import com.topcoder.util.generator.guid.*;

import junit.framework.TestCase;

import java.util.HashSet;
import java.util.Set;


/**
 * A simple functional test.
 *
 * @author Standlove
 * @version 1.0
 */
public class FunctionalTest extends TestCase {
    /**
     * The maximum number of uuid to generate.
     */
    private static final int MAX_COUNT = 5000;
    
    /**
     * Test the unique of the uuid generated by the Int32Generator.
     */
    public void testInt32GeneratorUnique() {
        UUID[] uuids = new UUID[MAX_COUNT];

        for (int i = 0; i < uuids.length; ++i) {
            uuids[i] = UUIDUtility.getNextUUID(UUIDType.TYPEINT32);
        }

        checkUnique(uuids);
    }

    /**
     * Test the unique of the uuid generated by the UUIDVersion1Generator.
     */
    public void testVersion1GeneratorUnique() {
        UUID[] uuids = new UUID[MAX_COUNT];

        for (int i = 0; i < uuids.length; ++i) {
            uuids[i] = UUIDUtility.getNextUUID(UUIDType.TYPE1);
        }

        checkUnique(uuids);
    }

    /**
     * Test the unique of the uuid generated by the UUIDVersion1Generator.
     */
    public void testVersion4GeneratorUnique() {
        UUID[] uuids = new UUID[MAX_COUNT];

        for (int i = 0; i < uuids.length; ++i) {
            uuids[i] = UUIDUtility.getNextUUID(UUIDType.TYPE4);
        }

        checkUnique(uuids);
    }

    /**
     * Check the uniqueness of the generated uuids.
     *
     * @param uuids an array of UUID to check.
     */
    private void checkUnique(UUID[] uuids) {
        Set ids = new HashSet();

        for (int i = 0; i < uuids.length; ++i) {
            ids.add(uuids[i].toString());
        }

        // check unique-ness
        assertEquals("The number of ids should match", uuids.length, ids.size());
    }
}
