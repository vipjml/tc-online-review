/**
 * Copyright (C) 2004, TopCoder, Inc. All rights reserved
 */
package com.topcoder.util.generator.guid;

import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * this is the main class for the GUID generator componet.This factory allows the apply
 * to either retrieve a generator by it's specific type or to simply generate the next UUID for that given type.
 * This factory offers three types of generators:
 * </p>
 * <ol>
 * <li>A 128 bit generator based off of the version 1draft for UUID generation</li>
 * <li>A 128 bit generator based off of the version 4 draft for UUID generation</li>
 * <li>A 32 bit generator based off of a published implementation</li>
 * </ol>
 * <p>
 * <p>
 * <strong>Thread safety: </strong> this class is thread safe in that it's immutable
 * </p>
 * 
 * @author TCSDEVELOPER
 * @author TCSDESIGNER
 * @version 1.0  
 */
public class UUIDUtility {

    /**
     * <p>
     * hold a map of generators (value) by their associated UUIDType (key).
     * </p>
     * <p>
     * <strong>Valid Values: </strong>a non-null map implementation that contains UUIDType keys and Generator
     * values.
     * </p>
     *  
     */
    private static final Map generators = new HashMap();

    /**
     * Because this is an utility class that provides only static methods, it has no sense to insantiate it.
     * This private constructor avoids the class to be instantiated.  
     * 
     */
    private UUIDUtility() {
        // just a private empty constructor to avoid instantiation
    }

    /**
     * Static initialization.
     * Populates the generators map with the availables types of generators.
     * 
     */
    static  {
        generators.put(UUIDType.TYPE1, new UUIDVersion1Generator());
        generators.put(UUIDType.TYPE4, new UUIDVersion4Generator());
        generators.put(UUIDType.TYPEINT32, new Int32Generator());
    }
    
    /**
     * <p>
     * returns the generator for the given type.
     * </p>
     * 
     * @param type
     *            a non-null UUIDType
     * @return a non-null Generator if found, null if not found
     * @throws NullPointerException if the type is null
     */
    public static final Generator getGenerator(UUIDType type) {
        if (type == null) { 
            throw new NullPointerException("type can't be null"); 
        }

        return (Generator) generators.get(type);
    }

    /**
     * <p>
     * returns the next UUID generated by the specified type.
     * </p>
     * 
     * @param type
     *            a non-null UUIDType
     * @return a non-null UUID if the type if found or null if type is not found
     * @throws NullPointerException
     *             if the type is null
     */
    public static final UUID getNextUUID(UUIDType type) {
        Generator gen = getGenerator(type);
        if (gen == null) {
            return null;
        }
        return gen.getNextUUID();
    }

}

