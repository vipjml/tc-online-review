/**
 * Copyright (C) 2004, TopCoder, Inc. All rights reserved
 */
package com.topcoder.util.generator.guid;

import java.math.BigInteger;

import com.topcoder.util.idgenerator.IDGenerationException;
import com.topcoder.util.idgenerator.IDGenerator;

/**
 * <p>
 * this is an adapter class to adapt the IDGenerator interface to the
 * UUIDGenerator component. This adapter will generate id's based on the
 * Int32Generator type.
 * </p>
 * <p>
 * <strong>Thread Safety: </strong>this class is thread safe because it's
 * immutable
 * </p>
 * 
 * @author TCSDEVELOPER
 * @author TCSDESIGNER
 * @version 1.0
 */
public class IDGeneratorAdapter implements IDGenerator {

    /**
     * <p>
     * returns the identifying name of the generator.
     * </p>
     * 
     * @return a non-null, non-empty string representing our identifying name
     */
    public String getIDName() {
        return getClass().getName();
    }

    /**
     * <p>
     * returns the next identifier generated by this component.
     * </p>
     * 
     * @return a long representing the next ID number
     * @throws NullPointerException
     *             if the a null is returned by the UUIDUtility
     */
    public long getNextID() {
        long id = 0;
        byte[] uuidBytes;

        UUID uuid = UUIDUtility.getNextUUID(UUIDType.TYPEINT32);

        // If the type TYPEINT32 was not found, UUIDUtility returns null, so the
        // next sentence
        // will throw NullPointerException in that case
        uuidBytes = uuid.toByteArray();

        for (int i = 0; i < 4; i++) {
            id <<= 8;
            id += (uuidBytes[i] & 0xFF);
        }
        return id;
    }

    /**
     * <p>
     * Returns the next ID in the ID sequence encapsulated by this instance in
     * the form of a BigInteger, rather than a long.
     * </p>
     * <p>
     * This method is not supported in this adapter.
     * </p>
     * 
     * @return next ID in the ID sequence as a BigInteger
     * 
     * @throws IDGenerationException
     *             if an error occurs while generating the ID (for example,
     *             error while connecting to the database)
     */
    public BigInteger getNextBigID() throws IDGenerationException {
        throw new UnsupportedOperationException(
                "This method is not supported in this adapter.");
    }

    /**
     * <p>
     * Disposes the id generator instance.
     * </p>
     */
    public void dispose() {
    }
}
