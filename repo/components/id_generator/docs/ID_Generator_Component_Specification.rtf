{\rtf1\ansi\ansicpg936\deff0\deflang1033{\fonttbl{\f0\fswiss Arial;}{\f1\fnil StarSymbol;}{\f2\fmodern Courier;}{\f3\froman\fcharset2 Symbol;}{\f4\froman Symbol;}{\f5\fmodern\fprq6\fcharset0 ??;}{\f6\fnil\fcharset134 SimSun;}}
{\colortbl ;\red0\green0\blue127;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\nowidctlpar\sa120\lang2052\f0\fs24 ID Generator 3.0 Component Specification\par
\pard\nowidctlpar\li720\sa120\fs20\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx360\b\fs24 1.\tab Design\par
\pard\nowidctlpar\b0\fs20 This component manages efficient generation of unique 64-bit IDs from an ascending sequence. Its services most closely resemble database \ldblquote sequences\rdblquote  such as those found in Oracle. These services are implemented using a database, but do not use vendor-specific sequence generation mechanisms. Instead these services are implemented in terms of standard Java and J2EE technologies for maximum portability.\par
\par
This component provides both a simple Java interface and also an EJB interface to its services.\par
\par
The design presented here uses a generalized version of the \ldblquote high-low\rdblquote  scheme used in version 1.0. The high-low scheme really reduced to allocating unique ranges of IDs and then distributing IDs from that range, and coordinating this allocation with a database table. This design simply implements this mechanism directly, and is more flexible as a result \endash  generator instances get \ldblquote blocks\rdblquote  of IDs from a database table, which may be configured to start on any ID and may be of any size.  As of 3.0, an actual Oracle sequence-backed implementation is available, as well.\par
This component addresses the specific requirements of 3.0 as follows:\par
\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4320\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i ID Generator Plug-in Fix\cell\i0 IDGeneratorFactory now provides a method with the signature getIDGenerator(String idName, String implClass) that allows for specifying specific strategies.  Note that backwards compatibility is maintained as the previous method is left as is (calling it is equivalent to calling getIDGenerator(idName, null)).  IDGeneratorHome has also been retrofitted with a create(String implClass) method.\cell\row\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4320\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i Oracle Sequence Plug-in\cell\i0 The OracleSequenceGenerator is an implementation of the IDGeneratorImpl that uses a backing Oracle DB\rquote s sequence functionality to generate IDs.  A simple mapping of generator name to sequence name is provided: The string \ldblquote _seq\rdblquote  is appended to the generator name and this is expected to be the name of the backing sequence.  This can be manually overridden by calling the setSequenceName method.\cell\row\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4320\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i Support for Large Identifiers\cell\i0 The IDGenerator interface now supports a getNextBigID() method that functions as described in the requirements spec\cell\row\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4320\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i Database Access\cell\i0 The DB Connection Factory component is now used in lieu of the previous hardcoded DB access/lookup method\cell\row\pard\nowidctlpar\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.1\tab Design Patterns \par
\pard\nowidctlpar\fi-283\li283\b0\f1\bullet\tab\f0 Factory:\par
\pard\nowidctlpar\tab The IDGeneratorFactory class returns instances of implementations of IDGenerator, so that the caller is shielded from the concrete class of the implementation. IDGeneratorFactory also happens to ensure that there is at most one instance per ID sequence (per JVM).\par
\pard\nowidctlpar\fi-283\li283\sb240\sa60\sl240\slmult0\tx0\f1\bullet\tab\f0 Strategy:\par
\pard\nowidctlpar\li283 IDGenerator is a strategy for generating IDs.\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.2\tab Industry Standards \par
\pard\nowidctlpar\b0 This component uses the following standard technologies to expose its services:\par
\pard\nowidctlpar\fi-283\li566\f1\bullet\tab\f0 JDBC 3.0\par
\f1\bullet\tab\f0 J2EE 1.3\par
\pard\nowidctlpar\li270\f1\bullet\tab\f0 EJB 2.0\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.3\tab Required Algorithms\par
\pard\nowidctlpar\b0\par
\b ID generation algorithm\par
\pard\nowidctlpar\qc\b0\par
\pard\nowidctlpar Pseudo-code for ID generation follows.\par
\par
if (next ID in block <= max block ID)\par
\tab temp = next ID\par
\tab increment next ID\par
\tab return temp\par
else\par
\tab get block size, next sequence ID from database\par
\tab next ID = next ID from database\par
\tab max block ID = next ID + block size \endash  1\par
\tab return next ID\par
\par
\b Oracle sequence algorithm\par
\b0 To generate an ID using the OracleSequenceGenerator, the default is to append \ldblquote _seq\rdblquote  to the name of the generator to determine the name of the sequence (this can be manually overridden by clients through the setSequenceName method \endash  use the seqName member to determine what the sequence name should be).  Then, \i sequenceName\i0 .nextval will return the next value from the Oracle DB.\par
\par
In order for both the IDGeneratorImpl and OracleSequenceGenerator algorithms to work the same way (high/low allocation), the Oracle generator should simulate \ldblquote allocating\rdblquote  a block of IDs by getting the next \i block size\i0  values in a single transaction. We set increment by value as block size.\par
\par
\b JDBC implementation issues\par
\b0\par
Since the database is coordinating distribution of blocks of IDs to multiple clients, potentially, it is essential that JDBC calls to the database be implemented correctly. Clients must be able to retrieve information from a database row and update it atomically.\par
\par
Developers should consider the following when implementing JDBC calls:\par
\pard\nowidctlpar\fi-283\li283\f1\bullet\tab\f0 Retrieving a new block of IDs requires a SELECT and UPDATE in the same transaction, therefore make sure that the Connection is \b not\b0   set to auto-commit; by default Connection do auto-commit.\par
\f1\bullet\tab\f0 The connection needs to use the \ldblquote Repeatable Read\rdblquote  transaction isolation level. This ensures that the SELECT and UPDATE are atomic, and prevents any updates in between the two. The \ldblquote Serializable\rdblquote  isolation level is not necessary.\par
\f1\bullet\tab\f0 Make sure to set the session bean's transaction attributes appropriately in the EJB deployment descriptor \endash  \b see the example deployment descriptor in the \ldblquote docs\rdblquote  directory.\b0\par
\pard\nowidctlpar\li283\par
Here is a suggested sequence of SQL queries and updates that might be used to retrieve a block of IDs from the sequence table \endash  developers are free to use this or not use it as desired:\par
\par
\f2 SELECT next_block_start, block_size \par
FROM id_sequences \par
WHERE name = ?\par
\par
UPDATE id_sequences \par
SET next_block_start = next_block_start + block_size \par
WHERE name = ?\par
\f0\par
The first query selects the next block start and current block size, which defines the next block of IDs used by the sequence. The second updates the next block start. In both cases the single in parameter is the sequence name.\par
\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.4\tab Component Class Overview\par
\pard\nowidctlpar\tab IDGenerator\par
\pard\nowidctlpar\fi720\li720\b0 Implementations of this interface encapsulate ID generation logic.\par
\pard\nowidctlpar\tab\b IDGeneratorFactory\b0\par
\pard\nowidctlpar\fi720\li720 Factory which returns instances of implementations of IDGenerator for given sequences.\par
\pard\nowidctlpar\b\tab IDGeneratorImpl\par
\pard\nowidctlpar\fi720\li720\b0 This class is the core of the component and actually generates the IDs. One such object exists per JVM per ID sequence. It is also used by IDGeneratorBean.\par
\pard\nowidctlpar\li720\b OracleSequenceGenerator\par
\tab\b0 This is an alternate implementation of the IDGenerator interface that uses a backing Oracle DB with built-in sequences functionality to generate IDs.\par
\pard\nowidctlpar\tab\b IDGeneratorBean\b0 :\par
\pard\nowidctlpar\fi720\li720 This stateless session bean is simply an EJB interface to the IDGenerator class.\par
\pard\nowidctlpar\tab\b IDGenerator\b0 :\par
\tab\b IDGeneratorHome\b0 :\par
\pard\nowidctlpar\fi720\li720 Remote component and home interface for the IDGeneratorBean stateless session EJB.\par
\pard\nowidctlpar\tab\b IDGeneratorLocal\b0 :\par
\b\tab IDGeneratorLocalHome\b0 :\par
\pard\nowidctlpar\fi720\li720 Local component and home interfaces for the IDGeneratorBean stateless session EJB.\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.5\tab Component Exception Definitions\par
\pard\nowidctlpar\b0\tab\b IDGenerationException\b0 :\par
\pard\nowidctlpar\fi720\sa120\tab Thrown whenever this component cannot retrieve ID sequence configuration or generate an ID (e.g. When unable to retrieve ID information from the database).\par
\pard\nowidctlpar\tab\b IDsExhaustedException\b0 :\par
\pard\nowidctlpar\fi720\sa120\tab Thrown whenever this component cannot generate an ID because a new block of IDs is needed, but there are not enough IDs left in the sequence to allocate another block.\par
\pard\nowidctlpar\tab\b NoSuchIDSequenceException\b0 :\par
\pard\nowidctlpar\fi720\sa120\tab Thrown whenever a non-existent ID sequence is requested (or there is no appropriate sequence defined in the Oracle DB if using the OracleSequenceGenerator).\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 1.6\tab Component Benchmark and Stress Tests\par
\pard\nowidctlpar\b0 ID generation through IDGenerator.getNextID() should typically be very fast \endash  as fast as a synchronized method call. Periodically the generator needs to access the database, so performance should reflect this. That is, if the sequence block size is 20, then one should see 20 very fast ID generations, with the next one somewhat slower \endash  time consistent with the time needed to access a database.\par
\par
The ID generation mechanism is synchronized, so multiple threads should have about the same ID generation throughput as a single thread.\par
\par
The IDGeneratorFactory\rquote s getIDGenerator(String, String) method should be synchronized to avoid concurrency issues there, since it modifies the generators Map.  OracleSequenceGenerator\rquote s seqName data member should be volatile so that setSequenceName changes propagate to all threads.\par
\par
ID generation through the EJB interface should have similar performance characteristics, but with the added overhead of the EJB call. The actual overhead is quite container-dependent. The overhead should be higher for access via the remote component interface than the local component interface.\par
\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx360\b\fs24 2.\tab Environment Requirements\tab\tab\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\fs20 2.1\tab Environment\par
\pard\nowidctlpar\fi-283\li283\b0\f1\bullet\tab\f0 J2SE 1.4 and a J2EE 1.3 classes are required to compile this component. J2SE 1.4 is required for the javax.sql classes. However, these are also provided by J2EE 1.3 distributions, so this component should also work in a J2EE 1.3 container running on J2SE 1.3.\par
\f1\bullet\tab\f0 J2SE 1.4 and a J2EE 1.3-compliant container with EJB 2.0 support (such as Jboss) are required to test and deploy this component (see note about J2SE 1.3 above).\par
\pard\nowidctlpar\li283\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 2.2\tab TopCoder Software Components\par
\pard\nowidctlpar\fi-360\li720\tx720\b0\f3\'b7\f4\tab\f0 DB Connection Factory 1.0 \endash  for getting connections to the backing DB\par
\pard\nowidctlpar\fi-360\li720\f3\'b7\f4\tab\f0 Configuration Manager 2.1.3 \endash  only because DB Connection Factory depends on it and needs to be configured via it\par
\f3\'b7\f4\tab\f0 Base Exception 1.0 \endash  for wrapping exceptions\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 2.3\tab Third Party Components\par
\pard\nowidctlpar\b0 None.\par
\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx360\b\fs24 3.\tab Installation and Configuration\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\fs20 3.1\tab Package Name\par
\pard\nowidctlpar\cf1\ul\b0\fs24 com.topcoder.util.idgenerator\cf0\ulnone\fs20\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 3.2\tab Configuration Parameters\par
\pard\nowidctlpar\b0 SQL statements used to get information about Oracle sequence or retrieve the next sequence id can be configured through ConfigManager. If corresponding properties are found in namespace "com.topcoder.util.idgenerator.OracleSequenceGenerator", specified SQL statements will be used, otherwise use default SQL statements instead.\par
\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2746\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4396\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6556\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\qc Property\i\cell\i0 SQL Statement Usage\cell Default\cell Comment\cell\row\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2746\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4396\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6556\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i SQL_SELECT_BLOCK_SIZE\cell\i0 Get information such as block size\cell SELECT INCREMENT_BY, MAX_VALUE FROM all_sequences WHERE SEQUENCE_NAME = \lang1033\f5 '\lang2052\f0 ?\lang1033\f5 '\lang2052\f0\cell "?" represents the sequence name.\cell\row\trowd\trgaph108\trleft-108\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2746\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4396\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6556\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8748\pard\intbl\nowidctlpar\i SQL_NEXT_SEQUENCE_ID\cell\i0 Get next sequence id\cell SELECT ?.NEXTVAL FROM DUAL\cell "?" represents the sequence name.\cell\row\pard\nowidctlpar\par
\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 3.3\tab Dependencies Configuration\par
\pard\nowidctlpar\b0 To compile the component, a JAR file containing J2EE 1.3 classes (javax.ejb classes) must be present in your TopCoder \ldblquote $\{ext_libdir\}\rdblquote  directory. This can be downloaded from http://java.sun.com/j2ee/sdk_1.3/. Also the build.xml file must include this JAR file in the \ldblquote buildlibs\rdblquote  path.\par
\i\par
\i0 At runtime, this component requires a database table, defined using the following DDL fragment:\par
\par
\f2 CREATE TABLE id_sequences (\par
\tab name\tab\tab\tab VARCHAR(255) NOT NULL,\par
\tab\tab\tab\tab PRIMARY KEY (name),\par
\tab next_block_start\tab BIGINT NOT NULL,\par
\tab block_size\tab\tab INT NOT NULL\f6\'a3\'ac\f0\par
\tab\f2 exhausted\f0\tab\tab\f2 TINYINT default 0\f0\par
\f2 );\f0\par
\par
Note that this table stores the \i next available ID\i0  for each sequence. So, if the value of next_block_start is 10001 in some row, then 10001 has definitely not yet been assigned as an ID.\par
\par
It is perfectly fine for other processes to update this table as well, as long as they use the same process as described above and update atomically.\par
\par
Also, ID sequences should be configured in the database before use:\par
\par
\f2 INSERT INTO id_sequences (name, next_block_start, block_size) \par
VALUES ('myGenerator', 1, 20);\i\f0\par
\i0\par
\i Oracle Sequence Generation (OracleSequenceGenerator)\par
\i0 An appropriate sequence needs to be created within the backing Oracle database.  Sequences can be created as follows:\par
\par
CREATE SEQUENCE sequence_name\line\~\~\~ MINVALUE value\line\~\~\~ MAXVALUE value\line\~\~\~ START WITH\~ value\line\~\~\~ INCREMENT BY value\line\~\~\~ CACHE value;\par
\par
The sequence will start with the \ldblquote START WITH\rdblquote  value and generate the next value by incrementing this value with the \ldblquote INCREMENT BY\rdblquote  value.  The generated values will be within [MINVALUE, MAXVALUE].  It will cache \ldblquote CACHE\rdblquote  IDs in memory at any one time for performance.  Alternatively, \ldblquote NOCACHE\rdblquote  may be specified instead to disable caching.  Note that because of the way this component maps generator names to sequence names, the sequence_name should always end with \ldblquote _seq\rdblquote  if possible.  Otherwise, a call to OracleSequenceGenerator.setSequenceName will be required to set the correct name before use.\par
\par
OracleSequenceGenerators will ignore the \ldblquote next block start\rdblquote  entry in the id_sequences table.\par
\par
\b IMPORTANT:\b0  When the sequence is created by another user, a public synonym should be created and used as the sequence name, otherwise the component will not work.\par
\par
CREATE SYNONYM synonym_name FOR schema.sequence_name;\par
\par
\par
\i Database Access\i0\par
As of 3.0, the DB Connection Factory component provides database access.  The DBConnectionFactory interface from that component provides a createConnection() as well as a createConnection(String name) method.  Implementations of IDGenerator should access the DB as follows:\par
\pard\nowidctlpar\fi-360\li720\tx720 1.\tab Call createConnection(name), passing it the IDName of the generator\par
\pard\nowidctlpar\fi-360\li720 2.\tab If the above throws a DBConnectionException, call createConnection() and attempt to use it\par
3.\tab If the above fails, fail with an IDGenerationException\par
\pard\nowidctlpar The DB Connection Factory component should be configured appropriately via the Configuration Manager to provide named connections above.  That  is, if the client will be calling getIDGenerator(\ldblquote myname\rdblquote ), there should ideally be a connection defined for DB Connection Factory called \ldblquote myname\rdblquote .  Otherwise, the default connection will be used.\par
\par
\par
If the EJB interface will be used, then the EJB component jar file must be deployed into a J2EE container. The specifics of EJB deployment are container-specific. \b Note to developer: provide more information about deployment descriptor and deployment for common containers here.\b0\par
\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx360\b\fs24 4.\tab Usage Notes\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\fs20 4.1\tab Required steps to test the component\par
\pard\nowidctlpar\fi-283\li283\b0\f1\bullet\tab\f0 Follow the Dependencies Configuration above.\par
\f1\bullet\tab\f0 Extract the component distribution.\par
\f1\bullet\tab\f0 Run the initialization scripts for the databases you wish to test (mysql.sql, mssql.sql, oracle.sql).\par
\f1\bullet\tab\f0 Execute \ldblquote ant test\rdblquote  in the directory to which the distribution was extracted.\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 4.2\tab Required steps to use the component\par
\pard\nowidctlpar\b0 Import component classes and then simply call the getNextID() method:\par
\par
\f2 // Simple usage of Java API\par
import com.topcoder.util.idgenerator.*;\par
...\par
IDGenerator myGenerator = IDGeneratorFactory.getIDGenerator(\f0\ldblquote\f2 myGenerator\f0\rdblquote\f2 );\par
long nextID = myGenerator.getNextID();\par
\par
// Ask for a specific implementation\par
myGenerator = IDGeneratorFactory.getIDGenerator(\f0\ldblquote\f2 gen\f0\rdblquote\f2 , \f0\ldblquote\f2 com.topcoder.idgenerator.OracleSequenceGenerator\f0\rdblquote\f2 );\par
nextID = myGenerator.getNextID();\par
\par
// Get a BigInteger ID\par
BigInteger nextBigID;\par
NextBigID = myGenerator.getNextBigID();\par
\par
// Use of EJB remote interface\par
import com.topcoder.util.idgenerator.ejb.*;\par
...\par
Context ctx = new InitialContext();\par
// note: home interface JNDI name may differ depending on deployment\par
Object rawMyGeneratorHome =\par
\tab ctx.lookup(\f0\ldblquote\f2 java:comp/ejb/IDGeneratorHome\f0\rdblquote\f2 );\par
IDGeneratorHome myGeneratorHome = \par
\tab (IDGeneratorHome) PortableRemoteObject.narrow(rawMyGeneratorHome, IDGeneratorHome.class);\par
\par
IDGenerator myGenerator = myGeneratorHome.create();\par
long nextID = myGenerator.getNextID(\f0\ldblquote\f2 myGenerator\f0\rdblquote\f2 );\par
\par
\par
// Use of EJB local interface\par
import com.topcoder.util.idgenerator.ejb.*;\par
...\par
Context ctx = new InitialContext();\par
// note: home interface JNDI name may differ depending on deployment\par
IDGeneratorHome myGeneratorHome =\par
\tab (IDGeneratorHome) ctx.lookup(\f0\ldblquote\f2 java:comp/ejb/IDGeneratorHome\f0\rdblquote\f2 );\par
\par
IDGenerator myGenerator = myGeneratorHome.create();\par
long nextID = myGenerator.getNextID(\f0\ldblquote\f2 myGenerator\f0\rdblquote\f2 );\par
\f0\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx0\b 4.3\tab Demo\par
\pard\nowidctlpar\fs24 1) Oracle sequence setup:\par
\b0\fs20\par
CREATE SEQUENCE ID_SEQUENCE_SEQ\par
    MINVALUE 1\par
    MAXVALUE 10000000\par
    START WITH  1\par
    INCREMENT BY 20\par
    CACHE 20;\par
    \par
CREATE SEQUENCE ORACLE_EXHAUST_SEQ\par
    MINVALUE 1\par
    MAXVALUE 1000\par
    START WITH  1000\par
    INCREMENT BY 20\par
    CACHE 20;    \par
\par
CREATE SEQUENCE ORACLE_EXHAUST_LESS\par
    MINVALUE 1\par
    MAXVALUE 1000\par
    START WITH  990\par
    INCREMENT BY 20\par
\pard\nowidctlpar\fi240 CACHE 20;  \par
\par
\pard\nowidctlpar\fs24 2\b ) DB Connection Factory setup (see DB Connection Factory CS for details)\b0\par
\fs20\par
\par
<CMConfig>  \par
  <Config name="com.topcoder.db.connectionfactory.DBConnectionFactoryImpl">\par
    <Property name="connections">\par
        <!-- The default shuoldnot be oracle, the db should be in the scope of the DBs which are allowed in IDGenerator 2.0 -->\par
        <Property name="default">\par
            <Value>IDGeneratorImpl</Value>\par
        </Property>\par
        \par
        <Property name="IDGeneratorImpl">\par
            <Property name="producer">\par
                <Value>com.topcoder.db.connectionfactory.producers.JDBCConnectionProducer</Value>\par
            </Property>\par
            <Property name="parameters">\par
                <Property name="jdbc_driver">\par
                    <Value>com.mysql.jdbc.Driver</Value>\par
                </Property>\par
                <Property name="jdbc_url">\par
                    <Value>jdbc:mysql://localhost:3306/tcs</Value>\par
                </Property>\par
                <Property name="user">\par
                    <Value>root</Value>\par
                </Property>\par
                <Property name="password">\par
                    <Value></Value>\par
                </Property>\par
            </Property>\par
        </Property>  \par
        \par
<!-- The user should keep the name : OracleIDGenerator for using oracle db -->\par
        <Property name="OracleSequence">\par
           <Property name="producer">\par
                <Value>com.topcoder.db.connectionfactory.producers.JDBCConnectionProducer</Value>\par
            </Property>\par
            <Property name="parameters">\par
                <Property name="jdbc_driver">\par
                    <Value>oracle.jdbc.driver.OracleDriver</Value>\par
                </Property>\par
                <Property name="jdbc_url">\par
                    <Value>jdbc:oracle:thin:@localhost:1521:test</Value>\par
                </Property>\par
                <Property name="user">\par
                    <Value>system</Value>\par
                </Property>\par
                <Property name="password">\par
                    <Value>manager1</Value>\par
                </Property>\par
            </Property>\par
        </Property>\par
    </Property>\par
</Config>\par
</CMConfig>\par
\par
\b\fs24 4.3.1\tab Demonstrates how to generator id from IDGeneratorFactory.\par
\b0\fs20 IDGenerator sqlGenerator = IDGeneratorFactory.getIDGenerator(TEST_ID_NAME);\par
long nextID = sqlGenerator.getNextID();\par
assertEquals("Failed to get next id.", ++nextID, sqlGenerator.getNextID());\par
\par
// get bigId\par
assertEquals("Failed to get next big id.", ++nextID, sqlGenerator.getNextBigID().longValue());\par
\par
// Ask for a specific implementation\par
IDGenerator oracleGenerator = IDGeneratorFactory.getIDGenerator(TEST_ORACLE_ID_NAME,\par
        OracleSequenceGenerator.class.getName());\par
\par
// getId from oracle sequence\par
long nextID2 = oracleGenerator.getNextBigID().longValue();\par
assertEquals("Failed to get next id.", ++nextID2, oracleGenerator.getNextID());\par
assertEquals("Failed to get next big id.", ++nextID2, oracleGenerator.getNextBigID().longValue());\par
\par
\b\fs24 4.3.2\tab Demonstrates how to generator id from EJB\par
\b0\fs20\par
Context ctx = new InitialContext();\par
\par
// note: home interface JNDI name may differ depending on deployment\par
// Retrieve from remote\par
Object rawMyGeneratorHome = ctx.lookup(TestIDGeneratorBean.idGeneratorHome);\par
IDGeneratorHome myGeneratorHome = (IDGeneratorHome) PortableRemoteObject.narrow(rawMyGeneratorHome,\par
        IDGeneratorHome.class);\par
\par
com.topcoder.util.idgenerator.ejb.IDGenerator myGenerator = myGeneratorHome.create();\par
System.out.println("Get id with ejb:" + myGenerator.getNextID(TEST_ID_NAME));\par
\par
// note: home interface JNDI name may differ depending on deployment\par
// Retrieve from local\par
myGeneratorHome = (IDGeneratorHome) ctx.lookup(TestIDGeneratorBean.idGeneratorHome);\par
\par
myGenerator = myGeneratorHome.create();\par
System.out.println("Get id with ejb:" + myGenerator.getNextID(TEST_ID_NAME));\par
\pard\keepn\nowidctlpar\sb120\sa60\sl240\slmult0\tx360\b\fs24 5.\tab Future Enhancements\par
\pard\nowidctlpar\b0\fs20 Future enhancements to consider include a user-definable maximum ID value, a configurable step value between IDs (for example, generating 3, 6, 9, ...), or even descending ID sequences (\i Note all this functionality does currently exist if using the Oracle Sequence Generator)\i0 . Future versions could also provide ID administration functionality, like defining new IDs, or modifying existing ones (currently this component assumes that IDs will be administered directly in the database as needed).\par
\pard\nowidctlpar\sa120\par
}
 