/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.util.scheduler.scheduling;

import com.topcoder.message.email.AddressException;
import com.topcoder.message.email.EmailEngine;
import com.topcoder.message.email.SendingException;
import com.topcoder.message.email.TCSEmailMessage;
import com.topcoder.util.config.ConfigManagerException;
import com.topcoder.util.file.DocumentGenerator;
import com.topcoder.util.file.Template;
import com.topcoder.util.file.TemplateDataFormatException;
import com.topcoder.util.file.TemplateFormatException;
import com.topcoder.util.file.fieldconfig.Field;
import com.topcoder.util.file.fieldconfig.Node;
import com.topcoder.util.file.fieldconfig.NodeList;
import com.topcoder.util.file.fieldconfig.TemplateFields;
import com.topcoder.util.log.Level;
import com.topcoder.util.log.Log;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * <p>
 * This class is used to send email alert notifications when a job raises an event matching the
 * requiredEvent initialized in ctor.
 * </p>
 *
 * <p>
 * The email message is generated by Document Generator component.
 * The template to generate and the recipients are initialized in constructor.
 * The message data can be retrieved by the {@link Job#getMessageData()} method, also, it will always add
 * &lt;JobStatus&gt;Event String&lt;/JobStatus&gt; and &lt;JobName&gt;job.getName()&lt;/JobName&gt;
 * nodes to the message data. After generating the email message, it uses <code>EmailEngine</code> to
 * send the email to the recipients.
 * </p>
 *
 * <p>
 * Note, <code>log</code>, <code>emailFromAddress</code> and <code>emailAlertSubject</code> are added
 * since version 3.0.
 * </p>
 *
 * <p>
 * Thread Safety : It is immutable and thread-safe.
 * </p>
 *
 * @author dmks, singlewood
 * @author argolite, TCSDEVELOPER
 * @version 3.0
 * @since 2.0
 */
public class EmailEventHandler implements EventHandler {
    /**
     * <p>
     * Represents template to generate the email message.
     * </p>
     *
     * <p>
     * It is initialized in ctor and never changed later.
     * </p>
     *
     * <p>
     * It will never be null.
     * </p>
     *
     * @since 2.0
     */
    private final Template template;

    /**
     * <p>
     * Represents the recipients of the email. Contains email addresses.
     * </p>
     *
     * <p>
     * It is initialized in ctor and never changed later.
     * </p>
     *
     * <p>
     * It will never be null or an empty list. It will never contain null or empty string.
     * </p>
     *
     * @since 2.0
     */
    private final List recipients;

    /**
     * <p>
     * Represents event causing the email alert notification.
     * </p>
     *
     * <p>
     * If the handled event matches requiredEvent, the corresponding email will be sent to the
     * recipients.
     * </p>
     *
     * <p>
     * It is initialized in the ctor and never changed later. Can't be null or empty.
     * </p>
     *
     * @since 2.0
     */
    private final String requiredEvent;

    /**
     * <p>
     * Represents the from address of the alert email.
     * </p>
     *
     * <p>
     * It is initialized in the constructor and never changed later.
     * </p>
     *
     * <p>
     * It will never be null or empty.
     * </p>
     *
     * @since 3.0
     */
    private final String emailFromAddress;

    /**
     * <p>
     * Represents the subject of the alert email.
     * </p>
     *
     * <p>
     * It is initialized in the constructor and never changed later.
     * </p>
     *
     * <p>
     * It will never be null or empty.
     * </p>
     *
     * @since 3.0
     */
    private final String emailAlertSubject;

    /**
     * <p>
     * Represents the <code>Log</code> that is used to report method entry/exit, as well as errors, in this class.
     * </p>
     *
     * <p>
     * It is set in the constructor and is immutable. It will never be null.
     * </p>
     *
     * @since 3.0
     */
    private final Log log;

    /**
     * <p>
     * Constructs an <code>EmailEventHandler</code>.
     * </p>
     *
     * @param template The template to generate email message.
     * @param recipients The recipients of the email.
     * @param event The event causing the email alert notification
     * @param emailFromAddress The origin of the email
     * @param emailAlertSubject The subject of the email
     * @param log The Log instance to be used for logging
     *
     * @throws IllegalArgumentException if any parameter is null, or event, emailFromAddress, emailAlertSubject is
     * empty string, or recipients is empty list, recipients list contains non-string or empty string element
     *
     * @since 2.0
     */
    public EmailEventHandler(Template template, List recipients, String event, String emailFromAddress,
        String emailAlertSubject, Log log) {
        Util.checkObjectNotNull(template, "template");
        Util.checkStringNotNullAndEmpty(event, "event");

        Util.checkListNotNullAndEmpty(recipients, "recipients");
        for (Iterator iter = recipients.iterator(); iter.hasNext();) {
            Object element = iter.next();
            if (element == null) {
                throw new IllegalArgumentException("jobs contains null element.");
            }

            if (!(element instanceof String)) {
                throw new IllegalArgumentException("jobs contains non-String elements.");
            }

            if (((String) element).trim().length() == 0) {
                throw new IllegalArgumentException("jobs contains empty String.");
            }
        }

        Util.checkStringNotNullAndEmpty(emailFromAddress, "emailFromAddress");
        Util.checkStringNotNullAndEmpty(emailAlertSubject, "emailAlertSubject");
        Util.checkObjectNotNull(log, "log");

        this.template = template;
        this.recipients = new ArrayList(recipients);
        this.requiredEvent = event;
        this.emailFromAddress = emailFromAddress;
        this.emailAlertSubject = emailAlertSubject;
        this.log = log;
    }

    /**
     * <p>
     * If the raised event matches requiredEvent, an email will be first generated and then sent to
     * the recipients.
     * </p>
     *
     * @param job the job raised the event.
     * @param event the event raised by the job
     *
     * @throws IllegalArgumentException if any parameter is null or event is not one of the three
     *         events of Job.
     *
     * @since 2.0
     */
    public void handle(Job job, String event) {
        log.log(Level.TRACE, "Enter EmailEventHandler#handle method.");

        // argument checking and logging
        try {
            Util.checkObjectNotNull(job, "job");
            Util.checkEventHandler(event, "event");
        } catch (IllegalArgumentException e) {
            log.log(Level.ERROR, e.getMessage());
            log.log(Level.TRACE, "Exit EmailEventHandler#handle method.");
            throw e;
        }

        try {
            if (event.equals(requiredEvent)) {
                // 1. Generate the message
                NodeList msgdata = job.getMessageData();
                Node[] nodes;
                if (msgdata == null) {
                    nodes = new Node[2];
                } else {
                    Node[] msgNodes = msgdata.getNodes();

                    nodes = new Node[msgNodes.length + 2];

                    // copy the nodes in msgdata.getNodes() to the rest of the array.
                    System.arraycopy(msgNodes, 0, nodes, 2, msgNodes.length);
                }

                nodes[0] = new Field("JobName", job.getName(), null, true);
                nodes[1] = new Field("JobStatus", event, null, true);

                TemplateFields data = new TemplateFields(nodes, template);
                DocumentGenerator instance = new DocumentGenerator();
                String message = instance.applyTemplate(data);

                // 2. send the email using EmailEngine.
                TCSEmailMessage email = new TCSEmailMessage();
                email.setSubject(emailAlertSubject);
                email.setFromAddress(emailFromAddress);
                email.setBody(message);

                for (Iterator iter = recipients.iterator(); iter.hasNext();) {
                    email.addToAddress((String) iter.next(), 0);
                }

                EmailEngine.send(email);
            }
        } catch (ConfigManagerException e) {
            log.log(Level.ERROR, "Failed to create DocumentGenerator, caused by " + e.getMessage());
        } catch (IllegalArgumentException e) {
            log.log(Level.ERROR, e.getMessage());
        } catch (TemplateFormatException e) {
            log.log(Level.ERROR, "Invalid email template, caused by " + e.getMessage());
        } catch (TemplateDataFormatException e) {
            log.log(Level.ERROR, "Invalid email template data, caused by " + e.getMessage());
        } catch (AddressException e) {
            log.log(Level.ERROR, "Invalid email addresses, caused by " + e.getMessage());
        } catch (SendingException e) {
            log.log(Level.ERROR, "Failed to send Emails, caused by " + e.getMessage());
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#handle method.");
        }
    }

    /**
     * <p>
     * Gets the recipients.
     * </p>
     *
     * @return the recipients
     * @since 2.0
     */
    public List getRecipients() {
        log.log(Level.TRACE, "Enter EmailEventHandler#getRecipients method.");

        try {
            return new ArrayList(recipients);
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#getRecipients method.");
        }
    }

    /**
     * <p>
     * Gets the required event.
     * </p>
     *
     * @return the required event.
     * @since 2.0
     */
    public String getRequiredEvent() {
        log.log(Level.TRACE, "Enter EmailEventHandler#getRequiredEvent method.");

        try {
            return requiredEvent;
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#getRequiredEvent method.");
        }
    }

    /**
     * <p>
     * Gets the requiredEvent.
     * </p>
     *
     * @return the template
     * @since 2.0
     */
    public Template getTemplate() {
        log.log(Level.TRACE, "Enter EmailEventHandler#getTemplate method.");

        try {
            return template;
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#getTemplate method.");
        }
    }

    /**
     * <p>
     * Gets the email from address.
     * </p>
     *
     * @return the email from address.
     *
     * @since 3.0
     */
    public String getEmailFromAddress() {
        log.log(Level.TRACE, "Enter EmailEventHandler#getEmailFromAddress method.");

        try {
            return this.emailFromAddress;
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#getEmailFromAddress method.");
        }
    }

    /**
     * <p>
     * Gets the email alert subject.
     * </p>
     *
     * @return the email alert subject.
     *
     * @since 3.0
     */
    public String getEmailAlertSubject() {
        log.log(Level.TRACE, "Enter EmailEventHandler#getEmailAlertSubject method.");

        try {
            return this.emailAlertSubject;
        } finally {
            log.log(Level.TRACE, "Exit EmailEventHandler#getEmailAlertSubject method.");
        }
    }
}